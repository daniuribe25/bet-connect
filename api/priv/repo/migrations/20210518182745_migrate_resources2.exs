defmodule PlConnect.Repo.Migrations.MigrateResources2 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:teams_users, primary_key: false) do
      add :user_id, :uuid
      add :team_id, :uuid
      add :id, :uuid, null: false, primary_key: true
    end

    create table(:teams_invitations, primary_key: false) do
      add :team_id, :uuid
      add :user_id, :uuid
      add :id, :uuid, null: false, primary_key: true
      add :status, :text, null: false, default: "pending"
      add :inserted_at, :utc_datetime_usec, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, default: fragment("now()")
    end

    create table(:teams, primary_key: false) do
      add :owner_id, references(:users, column: :id, name: "teams_owner_id_fkey", type: :uuid)
      add :id, :uuid, null: false, primary_key: true
      add :inserted_at, :utc_datetime_usec, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, default: fragment("now()")
    end

    alter table(:teams_invitations) do
      modify :team_id,
             references(:teams, column: :id, name: "teams_invitations_team_id_fkey", type: :uuid)

      modify :user_id,
             references(:users, column: :id, name: "teams_invitations_user_id_fkey", type: :uuid)
    end

    alter table(:teams_users) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "teams_users_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :team_id,
             references(:teams,
               column: :id,
               name: "teams_users_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:teams_users, [:team_id, :user_id],
             name: "teams_users_unique_teams_users_index"
           )
  end

  def down do
    drop_if_exists unique_index(:teams_users, [:team_id, :user_id],
                     name: "teams_users_unique_teams_users_index"
                   )

    alter table(:teams_users) do
      modify :team_id, :uuid
      modify :user_id, :uuid
    end

    alter table(:teams_invitations) do
      modify :user_id, :uuid
      modify :team_id, :uuid
    end

    drop table(:teams)

    drop table(:teams_invitations)

    drop table(:teams_users)
  end
end
